#include "variable.h"
#include "mhm.c"
#include "colli.c"
#include "GRAPHS.C"

#define ZERO 0.01

int pass=0;
int colored[2]={0,0},pace[2][40];
int ex=1,foul=0,gameflag=1,redflag=0,unchange=0,ff=1,iswhiballin=0;
int turn=0,round=15,count=0;
struct BALL past[BALLNUM];
void record()
{
	FILE *fp;
	int i,n;
	struct INFO
	{
		char name[20];
		int score;
		int rank;
		struct INFO *next;

	}*info[10],*head,*p1,*p2,p[2];

	if ((fp=fopen(".\\source\\rank.dat","r"))==NULL)
	{
		printf("File open Error!!!");
		getch();
		return;
	}
	for (i=0;i<2;i++)
	{
		strcpy(p[i].name,player[i].name);
		p[i].score=player[i].score;
		p[i].next=NULL;
	}
	for (i=0;i<10;i++)
		info[i]=malloc(sizeof(struct INFO));

	n=0;
	while(!feof(fp) && n<10)
	{
		fscanf(fp,"%s%d%d",info[n]->name,&info[n]->score,&info[n]->rank);
		info[n]->next=info[n+1];
		n++;
	}
	fclose(fp);
	info[n-1]->next=NULL;
	head=info[0];

	for (i=0;i<2;i++)
	{
		if (p[i].score>head->score)
		{
			p[i].next=head;
			head=p+i;
			continue;
		}
		for (p1=head;p1->next!=NULL;p1=p2)
		{
			p2=p1->next;
			if (p[i].score>p2->score)
			{
				p[i].next=p2;
				p1->next=p+i;
				break;
			}
		}
		if (p[i].score<=p1->score)
			p1->next=p+i;
	}
	fp=fopen(".\\source\\rank.dat","w");
	for (i=0,p1=head;p1!=NULL && i<10;p1=p1->next)
	{
		fprintf(fp,"%s %d %d\n",p1->name,p1->score,++i);
	}
	for (i=0;i<10;i++)
		free(info[i]);
	fclose(fp);
}


void win()
{
	int n;
	char *s[]={"这局的赢家是","平局"};

	if (player[0].score==player[1].score) n=-1;
	else n=(player[0].score < player[1].score);

	cleardevice();
	noplay();

	record();

	if (n!=-1)
	{
		outchinese(320-strlen(s[0])*4*4,100,s[0],YELLOW,4,1);
		settextstyle(0,0,10);
		setcolor(GREEN);
		outtextxy(200,170,player[n].name);
		sleep(2);
		closegraph();
		ShowBmp256(70,50,".\\source\\winner.bmp",0,0);
		InitGraph();
		toprank();
		End(0);
	}
	else
	{
		outchinese(320-strlen(s[1])*4*4,100,s[1],YELLOW,4,0);
		toprank();
		End(0);
	}
}
void ok()
{
      int i;
      for (i=1;i<BALLNUM;i++)
	      if (ball[i].ball_in==0) return;
      if (i==BALLNUM) win();
}

double mindistance(int i)
{
    int j,nums;
    double distance,min=502193;
    for(j=0;j<BALLNUM;j++)
        {
            if (j==i) continue;
            distance=pow(ball[i].posi.x-ball[j].posi.x,2)+pow(ball[i].posi.y-ball[j].posi.y,2);
            if (distance<min) min=distance;
        }
    return min;
}
void check_overlap(int ba)
{
	int i;
	int loop;
	double dis;

	do
	{
		loop=0;
		for (i=0;i<BALLNUM;i++)
		{
			if (i==ba || ball[i].ball_in) continue;
			dis=ball_distance(ball[ba],ball[i]);
			if (dis == 0)
			{
				ball[ba].posi.x-=2*BALL_R;
				loop=1;
			}
			else if (dis<=2*BALL_R)
			{
				ball[ba].posi.x=ball[i].posi.x+2*(BALL_R+1)*(ball[ba].posi.x-ball[i].posi.x)/dis;
				ball[ba].posi.y=ball[i].posi.y+2*(BALL_R+1)*(ball[ba].posi.y-ball[i].posi.y)/dis;
				loop=1;
			}
		}
	}while(loop);
}
void
resetball (int i)
{
	
	ball[i].posi.x=ball[i].origin.x;
	ball[i].posi.y=ball[i].origin.y;
	ball[i].velo.v = ball[i].velo.vx = ball[i].velo.vy = 0;
	ball[i].ball_in = 0;
	check_overlap(i);
	draw_ball (ball[i]);
}

void putball()
{
	int i;
	int movex=0,movey=0;
	double dis1,dis2,mindis;

	ball[0].posi.x=ball[0].origin.x;
	ball[0].posi.y=ball[0].origin.y;
	for (i=1;i<BALLNUM;i++)
	{
		dis1=ball_distance(ball[0],ball[i]);
		if (dis1 == 0)
		{
			ball[0].posi.x-=2*BALL_R;
		}
		else if (dis1<=2*BALL_R)
		{
			ball[0].posi.x=ball[i].posi.x+2*(BALL_R+1)*(ball[0].posi.x-ball[i].posi.x)/dis1;
			ball[0].posi.y=ball[i].posi.y+2*(BALL_R+1)*(ball[0].posi.y-ball[i].posi.y)/dis1;
		}
	}

	draw_ball(ball[0]);
	do
	{
		while(bioskey(1)) getch();
		while(!check_change(&movex,&movey,&button));

		mindis=sqrt(pow((ball[0].posi.x+movex-ball[1].posi.x),2)+pow((ball[0].posi.y+movey-ball[1].posi.y),2));
		if (!ispractising)
		{
			for (i=2;i<BALLNUM;i++)
			{
				dis1=sqrt(pow((ball[0].posi.x+movex-ball[i].posi.x),2)+pow((ball[0].posi.y+movey-ball[i].posi.y),2));
				mindis=(dis1<mindis)?dis1:mindis;
			}
		}
		dis2=sqrt(pow(ball[0].posi.x+movex-137,2)+pow(ball[0].posi.y+movey-290,2));
		if (dis2<=53 && mindis>=(2*BALL_R+2) && (ball[0].posi.x+movex)<=137)
		{
			erase_ball(ball[0]);
			ball[0].posi.x+=movex;
			ball[0].posi.y+=movey;
			draw_ball(ball[0]);
		}
	}while(button!=1);
	button=0;
	ball[0].ball_in=0;
}
void adjust()
{
	int key;
	double force;

	draw_stick(ball[0],ww);
	do
	{
		while(bioskey(1)!=0) getch();
		force=0;
		draw_dash(ball[0],ww);

		while(1)
		{
			key=0;
			if (bioskey(1))
			{
				key=bioskey(0);

				switch(key)
				{
					case ESC:key=-1;break;
					case SPACE:key=-2;break;
				}

			}
			if (key==-1 && ispractising)
			{
				ispractising=0;
				return;
			}
			if (key==-1) End(1);
			if (key==-2) break;
			if (neww!=ww)
			{
				draw_stick(ball[0],ww);
				draw_stick(ball[0],neww);
				ww=neww;
			}

			draw_dash(ball[0],ww);

			if (ww<0) ww+=2*PI;
			if (ww>2*PI) ww-=2*PI;
		}
	}while((force=energy())==-1);

	ball[0].velo.v=2*force;
	ball[0].velo.vx=-ball[0].velo.v*cos(ww);
	ball[0].velo.vy=-ball[0].velo.v*sin(ww);

	hitball(ball[0],ww);
}

void InitPlayer ()
{
	int i;
	char s[20];
	char *n[2]={"①","②"};

	while(bioskey(1)) getch();
	for (i = 0; i < 2; i++)
	{
		player[i].score = 0;
		sprintf (s, ".\\source\\head%d.bmp", i);
		player[i].head = bmp_to_dat (s);

		draw_window(210,212,430,246);
		sprintf (s,"玩家%s大名：",n[i]);
		outchinese(220,222,s,WHITE,1,0);
		gotoxy(41,15);
		scanf("%s",player[i].name);

	}
	cleardevice();
}
void
judge (int i)
{
  int k;
  static int multiin[3] = { 0, 0, 0 };
  if (!ispractising) {
    ball[i].ball_in = 1;
    draw_net ();
    if (i >= 1 && i <= 15) {
      if (colored[turn] == 0 || (colored[turn] && (pass == 1))) {
	colored[turn] = 1;
	player[turn].score += ball[i].score;
	unchange = 1;
	multiin[0] = count;
	pass = 0;

      }
      else {
	if (!(count == multiin[0])) {
	  colored[turn] = 0;
	  player[!turn].score += ball[i].score;
	  unchange = 0;
	}
	if (count == multiin[0]) {
	  player[turn].score += ball[i].score;
	}
      }
      if (count == multiin[3]) {
	colored[turn] = 0;
	unchange = 0;
      }
      erase_ball (ball[i]);
    }
    if (i >= 16 && i <= BALLNUM) {
      if (!redflag) {
	if (colored[turn] || ((pass == 1) && (colored[turn] == 0))) {
	  player[turn].score += ball[i].score;
	  erase_ball (ball[i]);
	  draw_net ();
	  colored[turn] = 0;
	  unchange = 1;
	  multiin[1] = count;
	  pass = 0;
	}
	else if (!(count == multiin[1])) {

	  unchange = 0;
	  foul = 1;
	  player[!turn].score += 4;
	  erase_ball (ball[i]);
	  draw_net ();
	  ff = 1;
	  return;
	}
	else {
	  player[turn].score += ball[i].score;
	  erase_ball (ball[i]);
	  draw_net ();
	}
	if (count == multiin[3]) {
	  colored[turn] = 0;
	  unchange = 0;
	}
      }
      else {
	if (i == round + 1 && pass) {
	  player[turn].score += ball[i].score;
	  erase_ball (ball[i]);
	  round++;
	  unchange = 1;
	}
	else {
	  unchange = 0;
	  foul = 1;
	  player[!turn].score += ball[i].score;
	  erase_ball (ball[0]);
	  ff = 1;
	  return;

	}
	if (count == multiin[3]) {
	  colored[turn] = 1;
	  unchange = 0;
	}
      }
    }
    if (i == 0) {
      player[!turn].score += 4;
      unchange = 0;
      erase_ball (ball[0]);
      draw_net ();
      iswhiballin = 1;
      multiin[3] = count;
    }

    draw_net ();
  }
  else {
    if (i) {
      erase_ball (ball[i]);
      draw_net ();
      ball[i].posi.x = 400;
      ball[i].posi.y = 290;
      ball[i].velo.vx = ball[i].velo.vy = ball[i].velo.v = 0;
      check_overlap (i);
      draw_ball (ball[i]);
    }
    if (!i) {
      erase_ball (ball[i]);
      draw_net ();
      iswhiballin = 1;
      ball[0].ball_in = 1;
    }
  }
}

void isfirsthit(int * q,int i,int j)
{
	if(!ispractising)
			if(i==0||j==0)
			{
			(*q)++;
                        if (*q)
			{
			if (!redflag)	
				{
				if (colored[turn]==1) 
				{
					if(i==0)
						{	
						if((j>=1)&&(j<=15)) player[!turn].score+=4;
						if((j>=16)&&(j<=BALLNUM)) pass=1;
						}
					if(j==0)
						{
						if((i>=1)&&(i<=15)) player[!turn].score+=4;
						if((i>=16)&&(i<=BALLNUM)) pass=1;	
						}
				}
				if (colored[turn]==0)
				{	
					if(i==0)
						{
						if((j>=1)&&(j<=15)) pass=1;
						if((j>=16)&&(j<=BALLNUM)) player[!turn].score+=4;
						}
					if(j==0)
						{
						if((i>=1)&&(i<=15)) pass=1;
						if((i>=16)&&(i<=BALLNUM)) player[!turn].score+=4;
						}
				}
			}
			else
			{
				if (i==0)
				{
					if (j==round) pass=1;
					if (j!=round) pass=0;
				}
				if (j==0)
				{
					if (i==round) pass=1;
				        if (i!=round) pass=0;	
				}
			}
			}
			}

}	

void move(int ballnumber)
{
	 int i,j,k;
         int firsthit=0;
	 
	while(!ff)
	{
        for (i=0;i<ballnumber;i++)
        {
            if (ball[i].velo.v>0&&!ball[i].ball_in) draw_ball(ball[i]);
        }

        for(i=0;i<ballnumber;i++)
        {
            if(ball[i].ball_in==1 ||(ball[i].velo.v==0&&mindistance(i)>pow(2*BALL_R+2,2))) continue;    /***如果球已进或球速为0，跳过***/
            if (ball[i].velo.v!=0) erase_ball(ball[i]);
            if(collision_table(ball+i)) 
		    draw_boundary();
	    ball[i].posi.x+=ball[i].velo.vx;
            ball[i].posi.y+=ball[i].velo.vy;
            for(j=0;j<ballnumber;j++)
            {
                if (i==j||ball[j].ball_in==1) continue;
                if(is_collision(ball[i],ball[j]))
                	{
                        collision(ball+i,ball+j);
			colli_sound();
                        isfirsthit(&firsthit,i,j);
			}
            }

            if (ball[i].velo.v!=0)  draw_ball(ball[i]);

            ball[i].velo.vx*=0.996;
            ball[i].velo.vy*=0.996;
            ball[i].velo.v*=0.996;

            if(fabs(ball[i].velo.vx)<0.1 && fabs(ball[i].velo.vy)<0.1)
            {
                ball[i].velo.vx=0;
                ball[i].velo.vy=0;
                ball[i].velo.v=0;
            }

            if(ball_in(ball[i]))
                judge(i);
            
	
        }
        ff=1;
        for(i=0;i<ballnumber;i++)
        {
            if(!(fabs(ball[i].velo.vx)<0.05&&fabs(ball[i].velo.vy)<0.05)&&ball[i].ball_in==0)
            {
                ff=0;
                break;
            }
        }
	}
        count++;
	draw_net();
	pass=0;
}
void practice(void)
{
	int i,j;
    InitNet(net);
    cleardevice();
    draw_table();
    InitBall(ball);
    for(i=2;i<BALLNUM;i++)
    {
        ball[i].ball_in=1;
    }
    for(i=0;i<2;i++)
    {
        draw_ball(ball[i]);
    }
	ispractising=1;
	putball();
	do
	{
		if(ball[0].ball_in==1)
        		{
	            		iswhiballin=0;
        	    		putball();
				draw_ball(ball[0]);

        		}
		adjust();
		if (ispractising==0) return;
		ff=0;
		move(2);

	}while(ispractising);
}


int main()
{

    int i,j,k;

    beforegame();
    InitNet(net);
    InitBall(ball);
    InitPlayer();
    for(i=0;i<2;i++)
    {
	    pace[i][0]=1;
    }
    draw_table();
    ff=1;
    iswhiballin=0;

    for (i=1;i<BALLNUM;i++)
    {
	    draw_ball(ball[i]);
    }
    putball();
    for (;ex;)
    {
		if (colored[turn]) colored[turn]++;
			
	        if(foul)
		{
	        	for(i=0;i<BALLNUM;i++)
			{
                        erase_ball(ball[i]);
			ball[i]=past[i];
			if (ball[i].ball_in==0)	draw_ball(ball[i]);
			}
			foul=0;
		}
                if(!redflag)
			player[turn].pace=!(colored[turn]==0);
		else 
		{
			player[turn].pace=-1;
			colored[turn]=1;
		}
		playerinfo(turn);
		if(ball[0].ball_in==1)
        		{
	            		iswhiballin=0;
        	    		putball();
        		}
		for(i=0;i<BALLNUM;i++)
			{
				past[i]=ball[i];
			}
		adjust();		
		ff=0;
		for(k=1;k<=15;k++)
			if(ball[k].ball_in==0) break;
	        if (k==16) redflag=1;
	        	else redflag=0;
		
		move(BALLNUM);
		 ok();ok();
		if(!redflag)
		{
			for(k=16;k<BALLNUM;k++)
				if (ball[k].ball_in==1) resetball(k);
		}
		if (colored[turn]==2) colored[turn]=0;
		if(ff)
        		{
       		  		if(!unchange) turn=!turn;
            			unchange=0;
			}
    }
    getch();
    getch();
}

